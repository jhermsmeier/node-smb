var SMB = require( '../../smb' )
var Packet = require( '../../packet' )
var inherit = require( 'bloodline' )

/**
 * NegotiateResponse Constructor
 * @return {NegotiateResponse}
 */
function NegotiateResponse() {
  
  if( !(this instanceof NegotiateResponse) )
    return new NegotiateResponse()
  
  Packet.call( this )
  
  // StructureSize (2 bytes): The server MUST set this field to 65,
  // indicating the size of the response structure, not including the header.
  // The server MUST set it to this value, regardless of how long Buffer[]
  // actually is in the response being sent.
  this.structureSize = 0x0000
  // SecurityMode (2 bytes): The security mode field specifies whether
  // SMB signing is enabled, required at the server, or both.
  // This field MUST be constructed using the SMB.NEGOTIATE.* values.
  this.securityMode = 0x0000
  // DialectRevision (2 bytes): The preferred common SMB 2 Protocol
  // dialect number from the Dialects array that is sent in the
  // NEGOTIATE Request or the SMB wildcard revision number.
  // The server SHOULD set this field to one of the SMB.DIALECT.* values.
  this.dialectRevision = 0x0000
  // Reserved (2 bytes): This field MUST NOT be used and MUST be reserved.
  // The server SHOULD set this to 0, and the client MUST ignore it on receipt.
  this.reserved = 0x0000
  // ServerGuid (16 bytes): A globally unique identifier that is generated by
  // the server to uniquely identify this server. This field MUST NOT be used by
  // a client as a secure method of identifying a server.
  this.serverGuid = new Buffer( 16 )
  // Capabilities (4 bytes): The Capabilities field specifies
  // protocol capabilities for the server. This field MUST be constructed using
  // a combination of zero or more of the SMB.CAPABILITY.* values.
  this.capabilities = 0x00000000
  // MaxTransactSize (4 bytes): The maximum size, in bytes,
  // of the buffer that can be used for QUERY_INFO, QUERY_DIRECTORY,
  // SET_INFO and CHANGE_NOTIFY operations.
  // This field is applicable only for buffers sent by the client in
  // SET_INFO requests, or returned from the server in QUERY_INFO,
  // QUERY_DIRECTORY, and CHANGE_NOTIFY responses.
  this.maxTransactSize = 0x00000000
  // MaxReadSize (4 bytes): The maximum size, in bytes,
  // of the length in an READ Request that the server will accept.
  this.maxReadSize = 0x00000000
  // MaxWriteSize (4 bytes): The maximum size, in bytes,
  // of the length in an WRITE Request that the server will accept.
  this.maxWriteSize = 0x00000000
  // SystemTime (8 bytes): The system time of the SMB server
  // when the NEGOTIATE Request was processed;
  // in FILETIME format as specified in [MS-DTYP] section 2.3.3.
  this.systemTime = 0x0000000000000000
  // ServerStartTime (8 bytes): The SMB server start time,
  // in FILETIME format as specified in [MS-DTYP] section 2.3.3.
  this.serverStartTime = 0x0000000000000000
  // SecurityBufferOffset (2 bytes): The offset, in bytes,
  // from the beginning of the SMB header to the security buffer.
  this.securityBufferOffset = 0x0000
  // SecurityBufferLength (2 bytes): The length, in bytes,
  // of the security buffer.
  this.securityBufferLength = 0x0000
  // Reserved2 (4 bytes): This field MUST NOT be used and MUST be reserved.
  // The server may set this to any value, and the client MUST ignore it on receipt.
  this.reserved2 = 0x00000000
  // Buffer (variable): The variable-length buffer that contains the
  // security buffer for the response, as specified by
  // SecurityBufferOffset and SecurityBufferLength.
  // The buffer SHOULD contain a token as produced by the GSS protocol.
  // If SecurityBufferLength is 0, this field is empty and
  // then client-initiated authentication, with an authentication protocol of
  // the client's choice, will be used instead of server-initiated
  // SPNEGO authentication as described in [MS-AUTHSOD] section 2.1.2.2.
  this.buffer = new Buffer( 0 )
  
}

/**
 * NegotiateResponse Prototype
 * @type {Object}
 */
NegotiateResponse.prototype = {
  
  constructor: NegotiateResponse,
  
  parsePayload: function( buffer ) {
    throw new Error( 'Not implemented' )
    return this
  },
  
  serialize: function() {
    throw new Error( 'Not implemented' )
  },
  
}

inherit( NegotiateResponse, Packet )
// Exports
module.exports = NegotiateResponse
